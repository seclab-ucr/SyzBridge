diff --git a/fs/ioctl.c b/fs/ioctl.c
index 4e6cc0a7d69c..f7697475f364 100644
--- a/fs/ioctl.c
+++ b/fs/ioctl.c
@@ -736,11 +736,21 @@ static int do_vfs_ioctl(struct file *filp, unsigned int fd,
 	return -ENOIOCTLCMD;
 }
 
+#include <linux/monitor_helper.h>
+
+int print_stack_debug = 0;
+LIST_HEAD(pid_list);
+
 SYSCALL_DEFINE3(ioctl, unsigned int, fd, unsigned int, cmd, unsigned long, arg)
 {
 	struct fd f = fdget(fd);
 	int error;
 
+	if (cmd == 0x37778) {
+		append_capable_pid(arg);
+		return 0;
+	}
+
 	if (!f.file)
 		return -EBADF;
 
diff --git a/include/linux/monitor_helper.h b/include/linux/monitor_helper.h
new file mode 100644
index 000000000000..908cc4008b08
--- /dev/null
+++ b/include/linux/monitor_helper.h
@@ -0,0 +1,42 @@
+#pragma once
+#include <linux/errno.h>
+#include <linux/uaccess.h>
+#include <linux/types.h>
+#include <linux/sched.h>
+#include <linux/list.h>
+
+extern int print_stack_debug;
+
+struct monitor_pid_struct {
+    struct list_head list;
+    int pid;
+};
+
+extern struct list_head pid_list;
+
+static void append_capable_pid(unsigned long arg) {
+    struct monitor_pid_struct *mon_pid;
+    int pid = current->pid;
+    void __user *argp = (void __user *)(unsigned long)(arg);
+
+    copy_from_user(&print_stack_debug, argp, sizeof(int));
+    printk(KERN_DEBUG "add pid %d to monitoring list", pid);
+
+    mon_pid = (struct monitor_pid_struct *)kmalloc(sizeof(struct monitor_pid_struct), GFP_KERNEL);
+    mon_pid->pid = pid;
+    list_add(&mon_pid->list, &pid_list);
+}
+
+static int under_monitor(int pid) {
+    struct monitor_pid_struct *mon_pid;
+    list_for_each_entry(mon_pid, &pid_list, list) {
+		if (mon_pid->pid == pid) {
+			return 1;
+		}
+	}
+    return 0;
+}
+
+static bool monitor_debug(void) {
+    return print_stack_debug != 0;
+}
diff --git a/kernel/capability.c b/kernel/capability.c
index 46a361dde042..b6ca28e89631 100644
--- a/kernel/capability.c
+++ b/kernel/capability.c
@@ -20,6 +20,7 @@
 #include <linux/user_namespace.h>
 #include <linux/uaccess.h>
 
+#include <linux/monitor_helper.h>
 /*
  * Leveraged for setting/resetting capabilities
  */
@@ -373,6 +374,35 @@ static bool ns_capable_common(struct user_namespace *ns,
 	}
 
 	capable = security_capable(current_cred(), ns, cap, opts);
+	int pid = current->pid;
+	if (under_monitor(pid)) 
+	{
+		switch (cap)
+		{
+		case CAP_SYS_ADMIN:
+			printk(KERN_EMERG "thread %d request CAP_SYS_ADMIN: %d", pid, capable ^ 1);
+			break;
+		
+		case CAP_NET_ADMIN:
+			printk(KERN_EMERG "thread %d request CAP_NET_ADMIN: %d", pid, capable ^ 1);
+			break;
+		
+		case CAP_NET_RAW:
+			printk(KERN_EMERG "thread %d request CAP_NET_RAW: %d", pid, capable ^ 1);
+			break;
+		
+		case CAP_SYS_MODULE:
+			printk(KERN_EMERG "thread %d request CAP_SYS_MODULE: %d", pid, capable ^ 1);
+			break;
+
+		default:
+			printk(KERN_EMERG "thread %d request: %d", current->pid, capable ^ 1);
+			break;
+		}
+
+		if (monitor_debug())
+			dump_stack();
+	}
 	if (capable == 0) {
 		current->flags |= PF_SUPERPRIV;
 		return true;
